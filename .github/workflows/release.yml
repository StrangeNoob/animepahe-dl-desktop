name: "publish"

on:
  workflow_dispatch:
  push:
    branches:
      - release
      - main

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.
      - name: Install Infisical CLI
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            # Windows: Use npx to avoid permission issues
            npm install -g @infisical/cli || true
          else
            # macOS/Linux: Standard global install
            npm install -g @infisical/cli
          fi
        shell: bash

      - name: export env variables
        env:
          INFISICAL_CLIENT_ID: ${{ secrets.INFISICAL_CLIENT_ID }}
          INFISICAL_CLIENT_SECRET: ${{ secrets.INFISICAL_CLIENT_SECRET }}
          INFISICAL_PROJECT_ID: ${{ secrets.INFISICAL_PROJECT_ID }}
        run: |
          if [ -z "${{ secrets.INFISICAL_CLIENT_ID }}" ] || [ -z "${{ secrets.INFISICAL_CLIENT_SECRET }}" ] || [ -z "${{ secrets.INFISICAL_PROJECT_ID }}" ]; then
            echo "INFISICAL_CLIENT_ID, INFISICAL_CLIENT_SECRET, and INFISICAL_PROJECT_ID are not set"
            exit 1
          fi
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            INFISICAL_CMD="npx @infisical/cli"
          else
            INFISICAL_CMD="infisical"
          fi

          # Login to Infisical
          export INFISICAL_TOKEN=$(${INFISICAL_CMD} login --method=universal-auth --client-id=${{secrets.INFISICAL_CLIENT_ID}} --client-secret=${{secrets.INFISICAL_CLIENT_SECRET}} --silent --plain)

          # Debug: List available folders to understand the structure
          echo "Listing available folders in Infisical:"
          ${INFISICAL_CMD} secrets folders --env=prod --projectId=${{secrets.INFISICAL_PROJECT_ID}} || true

          # Debug: List secrets in root to see what's available
          echo "Listing secrets in root:"
          ${INFISICAL_CMD} secrets --env=prod --projectId=${{secrets.INFISICAL_PROJECT_ID}} || true

          # For Windows, we need to work around the path resolution issue
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "Windows detected - using workaround for path resolution..."
            
            # Change to a temporary directory to avoid path conflicts
            cd /tmp 2>/dev/null || cd $TEMP 2>/dev/null || cd /c/temp 2>/dev/null || true
            
            # Try using --secretPath instead of --path, and use relative paths
            echo "Trying different approaches for Windows..."
            
            # Approach 1: Try with quotes and explicit path
            ${INFISICAL_CMD} export --env=prod --projectId=${{secrets.INFISICAL_PROJECT_ID}} --path="/Env-Variables/frontend" > "${GITHUB_WORKSPACE}/.env" 2>/dev/null || {
              echo "Approach 1 failed, trying approach 2..."
              # Approach 2: Try without leading slash
              ${INFISICAL_CMD} export --env=prod --projectId=${{secrets.INFISICAL_PROJECT_ID}} --path="Env-Variables/frontend" > "${GITHUB_WORKSPACE}/.env" 2>/dev/null || {
                echo "Approach 2 failed, trying approach 3..."
                # Approach 3: Try root path with filtering (if the folders don't exist, maybe all secrets are in root)
                ${INFISICAL_CMD} export --env=prod --projectId=${{secrets.INFISICAL_PROJECT_ID}} > "${GITHUB_WORKSPACE}/.env" 2>/dev/null || {
                  echo "All approaches failed for frontend secrets"
                  exit 1
                }
              }
            }
            
            # Same for backend
            ${INFISICAL_CMD} export --env=prod --projectId=${{secrets.INFISICAL_PROJECT_ID}} --path="/Env-Variables/backend" > "${GITHUB_WORKSPACE}/src-tauri/.env" 2>/dev/null || {
              echo "Backend approach 1 failed, trying approach 2..."
              ${INFISICAL_CMD} export --env=prod --projectId=${{secrets.INFISICAL_PROJECT_ID}} --path="Env-Variables/backend" > "${GITHUB_WORKSPACE}/src-tauri/.env" 2>/dev/null || {
                echo "Backend approach 2 failed, trying approach 3..."
                ${INFISICAL_CMD} export --env=prod --projectId=${{secrets.INFISICAL_PROJECT_ID}} > "${GITHUB_WORKSPACE}/src-tauri/.env" 2>/dev/null || {
                  echo "All approaches failed for backend secrets"
                  exit 1
                }
              }
            }
            
            # Return to workspace
            cd "${GITHUB_WORKSPACE}"
          else
            # For Unix systems, use the standard approach
            echo "Unix system detected - using standard paths..."
            ${INFISICAL_CMD} export --env=prod --projectId=${{secrets.INFISICAL_PROJECT_ID}} --path="/Env-Variables/frontend" > .env
            ${INFISICAL_CMD} export --env=prod --projectId=${{secrets.INFISICAL_PROJECT_ID}} --path="/Env-Variables/backend" > src-tauri/.env
          fi
        shell: bash

      - name: install frontend dependencies with Rollup fix
        run: |
          # Clear node_modules and package-lock first as suggested by Rollup error message
          rm -rf node_modules package-lock.json
          # Use npm install instead of npm ci to handle optional dependencies properly
          # This addresses the Rollup native module bug: https://github.com/npm/cli/issues/4828
          npm install
        shell: bash

      - name: Fetch secrets using Node.js script
        env:
          INFISICAL_CLIENT_ID: ${{ secrets.INFISICAL_CLIENT_ID }}
          INFISICAL_CLIENT_SECRET: ${{ secrets.INFISICAL_CLIENT_SECRET }}
          INFISICAL_PROJECT_ID: ${{ secrets.INFISICAL_PROJECT_ID }}
        run: node scripts/fetch-secrets.mjs

      - name: Build frontend
        run: npm run build

      - name: Sign ffmpeg binary (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          # Decode and import the certificate
          echo "${{ secrets.APPLE_CERTIFICATE }}" | base64 --decode > certificate.p12
          security create-keychain -p actions build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p actions build.keychain
          security import certificate.p12 -k build.keychain -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k actions build.keychain

          # Sign the ffmpeg binary with hardened runtime
          codesign --force --options runtime --sign "${{ secrets.APPLE_SIGNING_IDENTITY }}" --timestamp src-tauri/resources/ffmpeg/macos/ffmpeg

          # Verify the signature
          codesign --verify --verbose src-tauri/resources/ffmpeg/macos/ffmpeg

          # Clean up
          security delete-keychain build.keychain
          rm certificate.p12
        shell: bash

      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          tauriScript: npm run tauri
          includeUpdaterJson: true
          args: ${{ matrix.args }}
