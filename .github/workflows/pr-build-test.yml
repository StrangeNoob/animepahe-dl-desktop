name: "PR Build Test"

on:
  pull_request:
    branches:
      - release
    types: [opened, synchronize, reopened]

jobs:
  test-build:
    name: Test Build - ${{ matrix.platform }} ${{ matrix.args }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS builds
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
            name: "macOS (Apple Silicon)"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
            name: "macOS (Intel)"

          # Linux build
          - platform: "ubuntu-22.04"
            args: ""
            name: "Linux"

          # Windows build
          - platform: "windows-latest"
            args: ""
            name: "Windows"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install frontend dependencies with Rollup fix
        run: |
          # Clear node_modules and package-lock first as suggested by Rollup error message
          rm -rf node_modules package-lock.json
          # Use npm install instead of npm ci to handle optional dependencies properly
          # This addresses the Rollup native module bug: https://github.com/npm/cli/issues/4828
          npm install
        shell: bash

      - name: Build frontend
        run: npm run build

      - name: Build Tauri application
        run: npm run tauri build -- ${{ matrix.args }}

      - name: Verify build artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          echo "Checking Windows build artifacts..."
          $EXECUTABLE_FOUND = $false
          if (Test-Path "target/release/animepahe-tauri.exe") {
            echo "✅ Windows executable found at target/release/animepahe-tauri.exe"
            $EXECUTABLE_FOUND = $true
          } elseif (Test-Path "src-tauri/target/release/animepahe-tauri.exe") {
            echo "✅ Windows executable found at src-tauri/target/release/animepahe-tauri.exe"
            $EXECUTABLE_FOUND = $true
          }

          if ($EXECUTABLE_FOUND) {
            echo "Looking for Windows installers..."
            Get-ChildItem -Path "." -Recurse -Include "*.exe", "*.msi" | Where-Object { $_.Name -like "*nimepahe*" } | ForEach-Object {
              echo "Found installer: $($_.FullName)"
            }
          } else {
            echo "❌ Windows executable not found"
            exit 1
          }

      - name: Verify build artifacts (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "Checking macOS build artifacts..."
          TARGET_TRIPLE="${{ contains(matrix.args, 'aarch64') && 'aarch64-apple-darwin' || 'x86_64-apple-darwin' }}"

          echo "Looking for executable in target directories..."
          find . -name "animepahe-tauri" -type f 2>/dev/null | head -5

          # Check multiple possible locations for the executable
          EXECUTABLE_FOUND=false

          # Check new target structure (./target)
          if [ -f "target/$TARGET_TRIPLE/release/animepahe-tauri" ]; then
            echo "✅ macOS executable found at target/$TARGET_TRIPLE/release/animepahe-tauri"
            EXECUTABLE_FOUND=true
          # Check legacy location (src-tauri/target)
          elif [ -f "src-tauri/target/$TARGET_TRIPLE/release/animepahe-tauri" ]; then
            echo "✅ macOS executable found at src-tauri/target/$TARGET_TRIPLE/release/animepahe-tauri"
            EXECUTABLE_FOUND=true
          elif [ -f "src-tauri/target/release/animepahe-tauri" ]; then
            echo "✅ macOS executable found at src-tauri/target/release/animepahe-tauri"
            EXECUTABLE_FOUND=true
          elif [ -f "target/release/animepahe-tauri" ]; then
            echo "✅ macOS executable found at target/release/animepahe-tauri"
            EXECUTABLE_FOUND=true
          fi

          if [ "$EXECUTABLE_FOUND" = true ]; then
            echo "Looking for app bundles..."
            find . -name "*.app" -o -name "*.dmg" 2>/dev/null | head -10 | while read -r file; do
              echo "Found bundle: $file"
            done
          else
            echo "❌ macOS executable not found in expected locations"
            echo "Searching for build artifacts in workspace..."
            find . -name "*animepahe*" -type f 2>/dev/null | head -10 || echo "No animepahe artifacts found"
            exit 1
          fi

      - name: Verify build artifacts (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          echo "Checking Linux build artifacts..."
          # Check multiple possible locations for the executable
          EXECUTABLE_FOUND=false
          if [ -f "target/release/animepahe-tauri" ]; then
            echo "✅ Linux executable found at target/release/animepahe-tauri"
            EXECUTABLE_FOUND=true
          elif [ -f "src-tauri/target/release/animepahe-tauri" ]; then
            echo "✅ Linux executable found at src-tauri/target/release/animepahe-tauri"
            EXECUTABLE_FOUND=true
          fi

          if [ "$EXECUTABLE_FOUND" = true ]; then
            echo "Looking for Linux packages..."
            find . -name "*.deb" -o -name "*.AppImage" -o -name "*.rpm" 2>/dev/null | while read -r file; do
              echo "Found package: $file"
            done
          else
            echo "❌ Linux executable not found"
            exit 1
          fi

      - name: Build summary
        if: always()
        run: |
          echo "### Build Test Summary for ${{ matrix.name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ **Build successful**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build failed**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Platform: ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "- Architecture: ${{ matrix.args || 'default' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Node version: $(node --version)" >> $GITHUB_STEP_SUMMARY
          echo "- Rust version: $(rustc --version)" >> $GITHUB_STEP_SUMMARY
        shell: bash

  # Summary job that runs after all builds
  build-status:
    name: Build Status Check
    runs-on: ubuntu-latest
    needs: test-build
    if: always()
    steps:
      - name: Check build results
        run: |
          echo "### 🎯 Overall Build Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.test-build.result }}" == "success" ]; then
            echo "✅ **All platform builds successful!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The PR is ready to merge from a build perspective." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **One or more platform builds failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the individual build logs above for details." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Comment on PR
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const result = '${{ needs.test-build.result }}';
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            const body = result === 'success'
              ? `### ✅ Build Test Passed\n\nAll platform builds completed successfully!\n\n[View build logs](${runUrl})`
              : `### ❌ Build Test Failed\n\nOne or more platform builds failed. Please check the logs for details.\n\n[View build logs](${runUrl})`;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Build Test')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }